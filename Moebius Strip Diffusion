import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import ListedColormap
import matplotlib.animation as animation
import matplotlib.tri as mtri
from matplotlib.colors import LinearSegmentedColormap, Normalize
from matplotlib import cm
from matplotlib.animation import PillowWriter
import imageio

#Diffusion Function
def diffusion_with_bc(G, u_zero, k=0.2, max_iter=25, heat_bath=None):
    L = G.laplacian_matrix()
    t = 0
    if heat_bath==None:
        data = [u_zero]
        for i in range(1, max_iter):
            print(data, L)
            u_n = data[i-1] - k*L*data[i-1]
            data.append(u_n)
    else:
        for v in heat_bath.keys():
            if u_zero[v] < heat_bath[v]:
                u_zero[v] = heat_bath[v]
        data = [u_zero]
        for i in range(1, max_iter):
            u_n = data[i-1] - k*L*data[i-1]
            for v in heat_bath.keys():
                if u_n[v] < heat_bath[v]:
                    u_n[v] = heat_bath[v]
            data.append(u_n)
    return data

#Plot Data from Diffusion Function:
def plot_diffusion(data):
    sns.heatmap(data, cmap='hot_r')


cmap = cm.get_cmap('hot')



fig = plt.figure(figsize =(9, 5))
ax = plt.axes(projection ='3d')
a = np.linspace(0, 2.0 * np.pi,15)
b = np.linspace(-0.5, 0.5, 4)
a, b = np.meshgrid(a, b)
a, b = a.flatten(), b.flatten()
# This is the Mobius mapping, taking a, b pair and returning an x, y, z
x = (1 + 0.5 * b * np.cos(a / 2.0)) * np.cos(a)
y = (1 + 0.5 * b * np.cos(a / 2.0)) * np.sin(a)
z = 0.5 * b * np.sin(a / 2.0)
# Triangulate parameter space to determine the triangles
tri = mtri.Triangulation(a, b)
#Plotting the Mobius strip (or) Mobius triangulation


ax.plot_trisurf(x, y, z, triangles=tri.triangles, edgecolor = ['none'], color='none') 

norm = []
for i in data:
    new_list = []
    for j in i:
        new_list.append(j/100)
    norm.append(new_list)

flt_nums = []
for i in norm[0]:
    flt_nums.append(float(i))
norm.pop(0)
norm.insert(0, flt_nums)


def create_frame(t):
    for i in Mob:
        ax.scatter(x[i], y[i], z[i], c=norm[t][i], cmap=cmap, marker='o', s=100, vmin=0, vmax=1)
    plt.savefig(str(t) + "img.png", dpi=300, bbox_inches='tight')

max_iter = 25
for t in range(max_iter):
    create_frame(t)
frames = []
for t in range(max_iter):
    image = imageio.v2.imread(str(t)+"img.png")
    frames.append(image)

imageio.mimsave('./example.gif', frames, fps = 1)


#GIF Creation
"""max_iter = 25
for j in range(0, max_iter):
    for i in Mob:
        ax.scatter(x[i], y[i], z[i], c=norm[j][i], cmap=cmap, marker='o', s=100, vmin=0, vmax=1)
    filename = 'plot'+str(j)
    plt.savefig(filename, dpi=300, bbox_inches='tight')"""
